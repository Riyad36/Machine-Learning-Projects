# -*- coding: utf-8 -*-
"""ChurnPredictionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s01SHN6GK7cq3M846lx9qTIbYh-Pb4JH
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
# %matplotlib inline

df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head(3)

df.drop('customerID',axis='columns',inplace=True) #inplace = true will update the dataset

df.dtypes

"""total charges are string. we need to conver that into numbers"""

pd.to_numeric(df.TotalCharges, errors='coerce').isnull() #errors='coerce' will ignore the errors

df[pd.to_numeric(df.TotalCharges, errors='coerce').isnull()]

"""we will drop that rows. So will keep only that rows of the total which has no null values"""

df1 = df[df.TotalCharges!=' ']
df1.shape

df1.TotalCharges = pd.to_numeric(df1.TotalCharges)

df1.dtypes

tenure_churn_no = df1[df1.Churn == 'No'].tenure
tenure_churn_yes = df1[df1.Churn == 'Yes'].tenure

plt.xlabel("tenure")
plt.ylabel("Number of Customer")
plt.title("Customer Churn Visualization")

plt.hist([tenure_churn_yes, tenure_churn_no], color=['green', 'red'], label=['Churn = Yes', 'Churn = No'])
plt.legend()

mc_churn_no = df1[df1.Churn == 'No'].MonthlyCharges
mc_churn_yes = df1[df1.Churn == 'Yes'].MonthlyCharges

plt.xlabel("Monthly Charges")
plt.ylabel("Number of Customer")
plt.title("Customer Churn visualization")

plt.hist([mc_churn_yes, mc_churn_no], color=['green', 'red'], label=['Churn = Yes','Churn = No'])
plt.legend()

def print_unique_values(df):
  for column in df:
    if df[column].dtypes == 'object':
      print(f'{column} : {df[column].unique()}')

print_unique_values(df1)

"""We will replace all the "No internet service" and 'No Phone Service' with 'No' """

df1.replace('No internet service','No',inplace=True)
df1.replace('No phone service','No',inplace=True)

print_unique_values(df1)

"""Now I will convert all the yes/no coumns with 1/0"""

yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']

for column in yes_no_columns:
  df1[column].replace({'Yes':1,'No':0},inplace=True)

for column in df1:
  print(f' {column} : {df1[column].unique()}')

print_unique_values(df1)

df1['gender'].replace({'Female':1, 'Male':0},inplace=True)

df1.gender.unique()

df2 = pd.get_dummies(data=df1, columns=['InternetService', 'Contract', 'PaymentMethod'])
df2.columns

df2.shape

"""Now we need to scale to values """

cols_to_scale = ['tenure', 'MonthlyCharges', 'TotalCharges']

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

df2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])

df2.head(3)

X = df2.drop('Churn', axis='columns')
Y = df2['Churn']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=5)

X_train.shape

X_test.shape

"""Now we will start the part of tensorflow"""

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
                          keras.layers.Dense(20, input_shape=(26,), activation='relu'),
                          keras.layers.Dense(1, activation='sigmoid'),
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, Y_train, epochs=120)

model.evaluate(X_test, Y_test)

Y_test

yp = model.predict(X_test)
yp[:5]

"""It is giving two dimensional array. We need to convert it into single dimension"""

y_pred = []
for element in yp:
  if element > 0.5:
    y_pred.append(1)
  else:
    y_pred.append(0)

y_pred[:5]

from sklearn.metrics import confusion_matrix, classification_report

print(classification_report(Y_test, y_pred))

import seaborn as sn
cm = tf.math.confusion_matrix(labels=Y_test, predictions=y_pred)

plt.figure(figsize=(10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')